@model RecruiterWorkflow.Models.MatchCandidatesViewModel

@{
    ViewData["Title"] = "Job Description";
    ViewData["ContainerClass"] = "container-fluid";  // Use full width containe
    List<Candidate> suggestedCandidates = Model.Candidates;
    List<Match> savedMatches = Model.Job.Matches;
    List<int> suggestedCandidateIds = suggestedCandidates.Select(c => c.Id).ToList();
}

<div class="container-fluid">
    <div class="mt-3 mb-3 d-flex justify-content-start button-group">

        <a asp-controller="Jobs" asp-action="Index" id="back-button" class="btn back-button" hidden>Back to Jobs</a>
        <button type="button" id="back-button-trigger" data-bs-toggle="modal" data-bs-target="#backModalOne" class="btn back-button">Back to Jobs</button>

        <div class="modal fade" id="backModalOne" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content transparent-body">
                    <div class="modal-body">
                        <div class="d-flex justify-content-center gap-3">
                            <span class="material-symbols-outlined custom-icon">
                                smart_toy
                            </span>
                        </div>
                        <div class="d-flex justify-content-center gap-3 mt-3">
                            <div class="spinner-grow custom-spinner-medium" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="spinner-grow custom-spinner-medium" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="spinner-grow custom-spinner-medium" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @* <a asp-controller="Jobs" asp-action="Index" class="btn btn-primary">Save</a> *@
    </div>
    <div class="row justify-content-center">
        <!-- Candidate Profile Section -->
        <div class="col-5">
            <div class="card shadow">
                <div class="card-body profile-text">
                    <!-- Candidate Details -->
                    <div class="d-flex justify-content-start">
                        <h3>Job Description</h3>
                    </div>
                    <hr />
                    <p><strong>Role: </strong>@Model.Job.Title</p>
                    <hr/>
                    <h5>Location: </h5>
                    <p class="mb-0">@Model.Job.Clinic.Name</p>
                    <span class="mt-0">@Model.Job.Clinic.Address</span>
                    <hr />
                    <h5>Description: </h5>
                    <p>@Model.Job.Description</p>
                    <hr/>
                    <h5>Responsibilities: </h5>
                    <p>@Model.Job.Responsibilities</p>
                    <hr/>
                    <h5>Requirements: </h5>
                    <p>@Model.Job.Requirements</p>
                    <hr/>
                    <h5>Compensation & Benefits: </h5>
                    <p>@Model.Job.CompensationAndBenefits</p>
                    <hr/>

                    <!-- Positions Section -->
                    @if (Model.Job.AvailablePositions != null && Model.Job.AvailablePositions.Any())
                    {
                        <h5>Available Positions</h5>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile"
                            type="checkbox"
                            name="positionTypes"
                            value="Full-Time"
                            id="fullTime"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.FullTime) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="fullTime">Full-Time </label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile"
                            type="checkbox"
                            name="positionTypes"
                            value="Part-Time"
                            id="partTime"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.PartTime) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="partTime">Part-Time</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Temporary" id="temporary"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.Temporary) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="temporary">Temporary</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Permanent" id="permanent"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.Permanent) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="permanent">Permanent</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Remote" id="remote"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.Remote) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="remote">Remote</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="InOffice" id="inOffice"
                            @(Model.Job.AvailablePositions.Any(p => p.Type == PositionType.InOffice) ? "checked" : "")>
                            <label class="form-check-label profile-text" for="inOffice">In-Office</label>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Matched Jobs Section -->
        <div class="col-7">
            <h3 class="profile-text">Matched Candidates</h3>
            <div style="display: flex; align-items: center; gap: 24px;">
                <div class="form-check form-switch">
                    <input class="form-check-input search-toggle" type="checkbox" role="switch" id="flexSwitchCheckChecked">
                    <label class="form-check-label" for="flexSwitchCheckChecked">Search</label>
                </div>
                <div class="form-check form-switch">
                    <input class="form-check-input bookmark" type="checkbox" role="switch" id="flexSwitchCheckChecked2">
                    <label class="form-check-label" for="flexSwitchCheckChecked2">Bookmarked</label>
                </div>
            </div>
            <div class="search-filters" id="search-filters">
                <form asp-controller="MatchCandidates" asp-action="AISearchMatchedCandidates" method="get" class="form-inline">
                    <!-- AI Search Toggle -->
                    <input type="hidden" name="jobId" value="@Model.Job.Id" />

                    <div class="d-flex justify-content-center align-items-center">
                        <div class="d-flex gap-3">
                            <div class="custom-btn-group">
                                <input type="checkbox" class="btn-check search" id="ai-search-toggle" autocomplete="off" />
                                <label class="btn" for="ai-search-toggle">Natural Language Search</label>
                            </div>

                            <div class="custom-btn-group">
                                <input type="checkbox" class="btn-check" id="manual-search-toggle" autocomplete="off" />
                                <label class="btn" for="manual-search-toggle">Smart Filter Search</label>
                            </div>
                        </div>
                    </div>
                    <hr />

                    <!-- AI Search Form -->
                    <div class="form-group" id="ai-search">
                        <h5 class="search-title">Natural Language Search:</h5>
                        <p class="search-example">"Find Nurses that live in California"</p>
                        <input type="text" id="userPrompt" name="userPrompt" class="form-control" placeholder="Type your prompt here..." value="@Context.Request.Query["userPrompt"]"/>
                        <div class="d-flex justify-content-center">
                            @* <button type="submit" id="searchAlertTriggerNLS" data-bs-toggle="modal" data-bs-target="#searchingModalNLS" data-color="orange" class="btn search-button mt-3">Search</button> *@
                            <button type="button" id="searchNLS-trigger" data-bs-toggle="modal" data-bs-target="#searchingModalNLS" data-color="white" class="btn search-button mt-3">Search</button>

                            <div class="modal fade" id="searchingModalNLS" tabindex="-1" aria-labelledby="searchingModalNLS" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content transparent-body">
                                        <div class="modal-body">
                                            <div class="d-flex justify-content-center gap-3">
                                                <span class="material-symbols-outlined custom-icon">
                                                    smart_toy
                                                </span>
                                            </div>
                                            <div class="d-flex justify-content-center gap-3 mt-3">
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

                <form asp-controller="MatchCandidates" asp-action="SearchMatchedCandidates" method="get" class="form-inline">
                    <input type="hidden" name="jobId" value="@Model.Job.Id" />

                    @foreach (var candidateId in suggestedCandidateIds)
                    {
                        <input type="hidden" name="candidateIds" value="@candidateId" />
                    }

                    <div class="form-group" id="manual-search" style="display: none;">
                        <div class="mb-3 row align-items-center">
                            <input hidden type="text" id="view" name="view" value="match-candidates" />
                            <div class="col-sm-3">
                                <label for="name" class="col-form-label">Name</label>
                                <input type="text" id="name" name="name" class="form-control" value="@Context.Request.Query["name"]" />
                            </div>
                            <div class="col-sm-2">
                                <label for="state" class="col-form-label">State</label>
                                <input type="text" id="state" name="state" class="form-control" value="@Context.Request.Query["state"]" />
                            </div>
                            <div class="col-sm-3">
                                <label for="occupation" class="col-form-label">Occupation</label>
                                <input type="text" id="occupation" name="occupation" class="form-control" value="@Context.Request.Query["occupation"]" />
                            </div>
                            <div class="col-sm-3">
                                <label for="specialty" class="col-form-label">Specialty</label>
                                <input type="text" id="specialty" name="specialty" class="form-control" value="@Context.Request.Query["specialty"]" />
                            </div>
                        </div>
                        <label for="position" class="col-form-label">Position Type</label>
                        <br />
                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark"
                            type="checkbox"
                            name="positionTypes"
                            value="FullTime"
                            id="fullTime"
                            @(Context.Request.Query["positionTypes"].Contains("FullTime") ? "checked" : "")>
                            <label class="form-check-label" for="fullTime">Full-Time</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark"
                            type="checkbox"
                            name="positionTypes"
                            value="PartTime"
                            id="partTime"
                            @(Context.Request.Query["positionTypes"].Contains("PartTime") ? "checked" : "")>
                            <label class="form-check-label" for="partTime">Part-Time</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark" type="checkbox" name="positionTypes" value="Temporary" id="temporary"
                            @(Context.Request.Query["positionTypes"].Contains("Temporary") ? "checked" : "") />
                            <label class="form-check-label" for="temporary">Temporary</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark" type="checkbox" name="positionTypes" value="Permanent" id="permanent"
                            @(Context.Request.Query["positionTypes"].Contains("Permanent") ? "checked" : "") />
                            <label class="form-check-label" for="permanent">Permanent</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark" type="checkbox" name="positionTypes" value="Remote" id="remote"
                            @(Context.Request.Query["positionTypes"].Contains("Remote") ? "checked" : "") />
                            <label class="form-check-label" for="remote">Remote</label>
                        </div>

                        <div class="form-check form-check-inline">
                            <input class="form-check-input bookmark" type="checkbox" name="positionTypes" value="InOffice" id="inOffice"
                            @(Context.Request.Query["positionTypes"].Contains("InOffice") ? "checked" : "") />
                            <label class="form-check-label" for="inOffice">In-Office</label>
                        </div>

                        <br /><br />
                        <div class="d-flex justify-content-center">
                            <button type="submit" id="searchSFS-trigger" data-bs-toggle="modal" data-bs-target="#searchingModalSFS" data-color="white" class="btn search-button">Search</button>
                            @* <a hidden type="button" id="searchAlertTrigger" class="btn mt-2 btn-outline-primary link-button d-flex justify-content-center" data-bs-toggle="modal" data-bs-target="#searchingModal"> *@
                            @*    Searching... *@
                            @* </a> *@
                            @* <button type="button" class="btn btn-primary" id="searchAlertTrigger" data-bs-toggle="modal" data-bs-target="#searchingModal" hidden> *@
                            @*     Launch demo modal *@
                            @* </button> *@

                            <!-- Modal -->
                            <div class="modal fade" id="searchingModalSFS" tabindex="-1" aria-labelledby="searchingModalSFSLabel" aria-hidden="true">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content transparent-body">
                                        <div class="modal-body">
                                            <div class="d-flex justify-content-center gap-3">
                                                <span class="material-symbols-outlined custom-icon">
                                                    smart_toy
                                                </span>
                                            </div>
                                            <div class="d-flex justify-content-center gap-3">
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <hr />
            <div>
                @if (Model.Candidates != null && Model.Candidates.Any())
                {

                    <form asp-controller="MatchCandidates" asp-action="SaveMatches" method="post">
                        <div class="mt-3 mb-3 d-flex justify-content-center">
                            <button type="submit" class="btn save-button" id="saveMatchesButton" data-bs-toggle="modal" data-bs-target="#save-refresh-modal">Save & Refresh</button>

                            <div class="modal fade" id="save-refresh-modal" tabindex="-1">
                                <div class="modal-dialog modal-dialog-centered">
                                    <div class="modal-content transparent-body">
                                        <div class="modal-body">
                                            <div class="d-flex justify-content-center gap-3">
                                                <span class="material-symbols-outlined custom-icon">
                                                    smart_toy
                                                </span>
                                            </div>
                                            <div class="d-flex justify-content-center gap-3 mt-3">
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                                <div class="spinner-grow custom-spinner-medium" role="status">
                                                    <span class="visually-hidden">Loading...</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <input type="hidden" name="jobId" value="@Model.Job.Id" />

                        @foreach (var candidateId in suggestedCandidateIds)
                        {
                            <input type="hidden" name="candidateIds" value="@candidateId" />
                        }

                        <div class="row justify-content-center">
                            @foreach (var candidate in Model.Candidates)
                            {
                                var isBookmarked = savedMatches != null && savedMatches.Any(m => m.CandidateId == candidate.Id);
                                <div class="col-md-4 candidate-card @(isBookmarked ? "bookmarked" : "")">
                                    <div class="card shadow mb-4">
                                        <div class="card-body">
                                            <h5 class="card-title">@candidate.FirstName @candidate.LastName</h5>
                                            <p class="card-subtitle mb-2 text-body-secondary">@candidate.Occupation - @candidate.Specialty</p>
                                            <p class="card-subtitle mb-2 text-body-secondary">@candidate.State</p>
                                            <div class="form-check">
                                                <input type="checkbox"
                                                       class="form-check-input bookmark"
                                                       name="savedCandidateIds"
                                                       value="@candidate.Id"
                                                       id="candidate-@candidate.Id"
                                                @(isBookmarked ? "checked" : "") />
                                                <label class="form-check-label" for="candidate-@candidate.Id">
                                                    Bookmark
                                                </label>
                                            </div>
                                            <div>
                                                <a type="button" id="open-profile-trigger" class="btn mt-2 btn-outline-primary link-button d-flex justify-content-center" data-color="blue" data-bs-toggle="modal" data-bs-target="#profileModal">
                                                    View Profile
                                                </a>
                                            </div>
                                            
                                            <!-- Modal -->
                                            <div class="modal fade" id="profileModal" tabindex="-1">
                                                <div class="modal-dialog modal-lg profile-text">
                                                    <div class="modal-content">
                                                        <div class="modal-header">
                                                            <h1 class="modal-title fs-5" id="profileModalLabel">Candidate Profile</h1>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <div class="modal-body">
                                                            <p><strong>Name:</strong> @candidate.FirstName @candidate.LastName</p>
                                                            <p><strong>Email:</strong> @candidate.Email</p>
                                                            <p><strong>Phone:</strong> @candidate.Phone</p>
                                                            <p><strong>State:</strong> @candidate.State</p>
                                                            <p><strong>Occupation:</strong> @candidate.Occupation</p>
                                                            @if (!string.IsNullOrEmpty(candidate.Specialty))
                                                            {
                                                                <p><strong>Specialty:</strong> @candidate.Specialty</p>
                                                            }
                                                            @if (!string.IsNullOrEmpty(candidate.Availibility))
                                                            {
                                                                <p><strong>Availability:</strong></p>
                                                            }

                                                            <hr />

                                                            <!-- Positions Section -->
                                                            <div class="mb-2">
                                                                @if (candidate.Positions != null && candidate.Positions.Any())
                                                                {
                                                                    <h5>Availability</h5>
                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click profile"
                                                                               type="checkbox"
                                                                               name="positionTypes"
                                                                               value="FullTime"
                                                                               id="fullTime"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.FullTime) ? "checked" : "")>
                                                                        <label class="form-check-label profile-text" for="fullTime">Full-Time</label>
                                                                    </div>

                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click profile"
                                                                               type="checkbox"
                                                                               name="positionTypes"
                                                                               value="PartTime"
                                                                               id="partTime"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.PartTime) ? "checked" : "")>
                                                                        <label class="form-check-label no-click profile-text" for="partTime">Part-Time</label>
                                                                    </div>
                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Temporary" id="temporary"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.Temporary) ? "checked" : "")>
                                                                        <label class="form-check-label profile-text" for="temporary">Temporary</label>
                                                                    </div>

                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Permanent" id="permanent"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.Permanent) ? "checked" : "")>
                                                                        <label class="form-check-label profile-text" for="permanent">Permanent</label>
                                                                    </div>

                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click profile" type="checkbox" name="positionTypes" value="Remote" id="remote"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.Remote) ? "checked" : "")>
                                                                        <label class="form-check-label profile-text" for="remote">Remote</label>
                                                                    </div>

                                                                    <div class="form-check form-check-inline">
                                                                        <input class="form-check-input no-click" type="checkbox" name="positionTypes" value="InOffice" id="inOffice"
                                                                        @(candidate.Positions.Any(p => p.Type == PositionType.InOffice) ? "checked" : "")>
                                                                        <label class="form-check-label profile-text" for="inOffice">In-Office</label>
                                                                    </div>
                                                                }
                                                                else
                                                                {
                                                                    <p>No positions available.</p>
                                                                }
                                                            </div>

                                                            <!-- Credentials Section -->
                                                            @if (candidate.Credentials != null && candidate.Credentials.Any())
                                                            {
                                                                <hr />
                                                                <h5>Credentials</h5>
                                                                <ul>
                                                                    @foreach (var credential in candidate.Credentials)
                                                                    {
                                                                        <li>@credential.Issuer @credential.Name</li>
                                                                    }
                                                                </ul>
                                                            }

                                                            <!-- Experiences Section -->
                                                            @if (candidate.Experiences != null && candidate.Experiences.Any())
                                                            {
                                                                <hr />
                                                                <h5>Work Experiences</h5>
                                                                <ul>
                                                                    @foreach (var experience in candidate.Experiences)
                                                                    {
                                                                        <li>
                                                                            @experience.Employer - @experience.Role
                                                                        </li>
                                                                    }
                                                                </ul>

                                                            }

                                                            <!-- Skills Section -->
                                                            @if (candidate.Skills != null && candidate.Skills.Any())
                                                            {
                                                                <hr />
                                                                <h5>Skills</h5>
                                                                <ul>
                                                                    @foreach (var skill in candidate.Skills)
                                                                    {
                                                                        <li>@skill.Name</li>
                                                                    }
                                                                </ul>
                                                            }
                                                        </div>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-outline-danger" data-bs-dismiss="modal">Close</button>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        @* <div class="mt-3 mb-3 d-flex justify-content-center"> *@
                        @*     <button type="submit" class="btn btn-primary" id="saveMatchesButton">Save & Refresh</button> *@
                        @* </div> *@
                    </form>
                }
                else
                {
                    <p>No Candidates available.</p>
                }
            </div>
        </div>
    </div>
    <br />
    <br />

    <div class="mt-4 mb-3 d-flex justify-content-center button-group">
        <a asp-controller="Jobs" asp-action="Index" class="btn back-button">Back to Jobs</a>
        <button type="button" class="btn save-button" id="triggerButton">Save & Refresh</button>
    </div>
</div>
<script>
    // JavaScript to toggle visibility based on the checkboxes
    document.addEventListener("DOMContentLoaded", function () {
		console.log("DOM loaded");
		refreshBookmarks();
        //document.getElementById("ai-search-toggle").click();

        const showFiltersCheckbox = document.getElementById("flexSwitchCheckChecked");
        const searchFiltersContainer = document.getElementById("search-filters");

        const switchElement = document.getElementById("flexSwitchCheckChecked");

        // Load the persisted state
        const showFilters = localStorage.getItem("ShowFilters") === "true";
        switchElement.checked = showFilters;

        // Attach change event to persist state
        switchElement.addEventListener("change", function () {
            localStorage.setItem("ShowFilters", switchElement.checked);
        });

        function toggleSearchFilters() {
            if (showFiltersCheckbox.checked) {
                searchFiltersContainer.style.display = "block"; // Show filters
            } else {
                searchFiltersContainer.style.display = "none"; // Hide filters
            }
        }

        function refreshBookmarks() {
            console.log("refreshBookmarks");
            document.getElementById("flexSwitchCheckChecked2").click();
            document.getElementById("flexSwitchCheckChecked2").click();
        }

        // Call toggleSearchFilters initially to set the correct state
        toggleSearchFilters();

        // Add event listener to toggle filters visibility when the checkbox state changes
        showFiltersCheckbox.addEventListener("change", toggleSearchFilters);

        const aiSearchToggle = document.getElementById("ai-search-toggle");
        const manualSearchToggle = document.getElementById("manual-search-toggle");
        const aiSearchDiv = document.getElementById("ai-search");
        const manualSearchDiv = document.getElementById("manual-search");

        // Initialize toggle states from localStorage or set defaults
        let aiSearchState = localStorage.getItem("ShowAISearch") === "true";
        let manualSearchState = localStorage.getItem("ShowManualSearch") === "true";

		if (aiSearchState === false && manualSearchState === false) {
			manualSearchState = true;
		}

        aiSearchToggle.checked = aiSearchState;
        manualSearchToggle.checked = manualSearchState;

		console.log("aiSearchState:", aiSearchToggle.checked);
		console.log("manualSearchState:", manualSearchToggle.checked);

        

        // Function to toggle visibility
        function toggleSearchVisibility(selectedToggle) {
            if (selectedToggle === "ai") {
                aiSearchDiv.style.display = "block";
                manualSearchDiv.style.display = "none";
                aiSearchToggle.checked = true;
                manualSearchToggle.checked = false;
                localStorage.setItem("ShowAISearch", true);
                localStorage.setItem("ShowManualSearch", false);
            } else if (selectedToggle === "manual") {
                aiSearchDiv.style.display = "none";
                manualSearchDiv.style.display = "block";
                aiSearchToggle.checked = false;
                manualSearchToggle.checked = true;
                localStorage.setItem("ShowAISearch", false);
                localStorage.setItem("ShowManualSearch", true);
            }
            // } else {
            //     aiSearchToggle.checked = false;
            //     manualSearchToggle.checked = true;
            //     aiSearchDiv.style.display = "none";
            //     manualSearchDiv.style.display = "block";
            // }
            //persistToggleStates();
        }


        if (aiSearchToggle.checked) {
            toggleSearchVisibility("ai");
        } else if (manualSearchToggle.checked) {
            toggleSearchVisibility("manual");
        }

        aiSearchToggle.onclick = () => toggleSearchVisibility("ai");
        manualSearchToggle.onclick = () => toggleSearchVisibility("manual");
    });
    
    let suggestedCandidateIds = @Html.Raw(Json.Serialize(suggestedCandidateIds));
    // Move the toggleMatch function to the global scope
    function toggleMatch(candidateId) {
        const index = suggestedCandidateIds.indexOf(candidateId);

        // Add or remove candidate from matched IDs
        if (index === -1) {
            suggestedCandidateIds.push(candidateId);
            document.querySelector(`[data-candidate-id="${candidateId}"]`).textContent = "Unmatch";
            document.querySelector(`[data-candidate-id="${candidateId}"]`).classList.replace("btn-outline-success", "btn-outline-danger");
        } else {
            suggestedCandidateIds.splice(index, 1);
            document.querySelector(`[data-candidate-id="${candidateId}"]`).textContent = "Match";
            document.querySelector(`[data-candidate-id="${candidateId}"]`).classList.replace("btn-outline-danger", "btn-outline-success");
        }

        console.log("Updated suggestedCandidateIds:", suggestedCandidateIds);
    }

    document.getElementById("triggerButton").addEventListener("click", function () {
        document.getElementById("saveMatchesButton").click();
        //document.getElementById("flexSwitchCheckChecked2").click();
        // document.getElementById("flexSwitchCheckChecked2").click();
    });

    document.getElementById("back-button-trigger").addEventListener("click", function () {
        document.getElementById("back-button").click();
    });

    // const switchElement = document.getElementById("flexSwitchCheckChecked");

    //     Load the persisted state
    // const showFilters = localStorage.getItem("ShowFilters") === "true";
    // switchElement.checked = showFilters;

    // Attach change event to persist state
    // switchElement.addEventListener("change", function () {
    //     localStorage.setItem("ShowFilters", switchElement.checked);
    // });

    // function toggleSearchFilters() {
    //     if (showFiltersCheckbox.checked) {
    //         searchFiltersContainer.style.display = "block"; Show filters
    //     } else {
    //         searchFiltersContainer.style.display = "none"; Hide filters
    //     }
    // }

    // Call toggleSearchFilters initially to set the correct state
    // toggleSearchFilters();

    // Add event listener to toggle filters visibility when the checkbox state changes
    //showFiltersCheckbox.addEventListener("change", toggleSearchFilters);

    document.getElementById("flexSwitchCheckChecked2").addEventListener("change", function () {
        localStorage.setItem("ShowBookmarks", document.getElementById("flexSwitchCheckChecked2").checked);
    });

    const showBookmarks = localStorage.getItem("ShowBookmarks") === "true";

    document.getElementById("flexSwitchCheckChecked2").checked = showBookmarks;

    function toggleBookmarks () {
        const isBookmarkedChecked = this.checked;
        const allCandidates = document.querySelectorAll(".candidate-card");

        // if (isBookmarkedChecked === true) {
        // document.getElementById("saveMatchesButton").click();
        // }

        allCandidates.forEach(candidate => {
			console.log(isBookmarkedChecked);
            if (isBookmarkedChecked) {
                // Show only bookmarked candidates
                //document.getElementById("saveMatchesButton").click();
                candidate.style.display = candidate.classList.contains("bookmarked") ? "block" : "none";
            } else {
                // Show all candidates
                candidate.style.display = "block";
            }
        });
    }

    document.getElementById("flexSwitchCheckChecked2").addEventListener("change", toggleBookmarks);

    // $('#searchingModalNLS').data('bs.modal').$backdrop.css('background-color', 'red');
   @*  $('searchingModalNLS').on("click", function (e) { *@
   @*    var color = $(this).attr('data-color'); *@
   @*    var colorBackdrop = 'modal-backdrop-' + color; *@
	  @* console.log(colorBackdrop); *@
   @*    $('#modal-backdrop').addClass(colorBackdrop); *@
   @*  }); *@
     $('#profileModal').data('bs.modal').$backdrop.css('background-color','blue')
    @*   $('[id$="-trigger"]').on("click", function (e) { *@
    @*   var color = $(this).attr('data-color'); *@
    @*   var colorBackdrop = 'modal-backdrop-' + color; *@
    @*   // alert(color); *@
	   @* console.log(colorBackdrop); *@
    @*   $('#modal-backdrop').addClass(colorBackdrop); *@
    @* }); *@

    $('#profileModal').on("hidden.bs.modal", function (e) {
      var color = $('.in').attr('data-color');
      var activeBackdrop = 'modal-backdrop-' + color;
      console.log("close");

      $('#modal-backdrop').removeClass(activeBackdrop);
    });
    // toggleBookmarks();
</script>